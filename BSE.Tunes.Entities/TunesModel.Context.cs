//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BSE.Tunes.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    
    public partial class TunesEntities : DbContext
    {
        public TunesEntities()
            : base("name=TunesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<filtersettings> filtersettings { get; set; }
        public DbSet<genre> genre { get; set; }
        public DbSet<HistoryEntity> history { get; set; }
        public DbSet<ArtistEntity> interpreten { get; set; }
        public DbSet<TrackEntity> lieder { get; set; }
        public DbSet<medium> medium { get; set; }
        public DbSet<PlaylistEntity> playlist { get; set; }
        public DbSet<PlaylistEntryEntity> playlistentries { get; set; }
        public DbSet<AlbumEntity> titel { get; set; }
        public DbSet<albums> albums { get; set; }
    
        public virtual ObjectResult<string> GetSearchSuggestions(string searchPhrase)
        {
            var searchPhraseParameter = searchPhrase != null ?
                new ObjectParameter("searchPhrase", searchPhrase) :
                new ObjectParameter("searchPhrase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSearchSuggestions", searchPhraseParameter);
        }
    
        public virtual ObjectResult<SearchResult> GetAlbumSearch(string searchPhrase, Nullable<int> pageSize, Nullable<int> pageIndex)
        {
            var searchPhraseParameter = searchPhrase != null ?
                new ObjectParameter("searchPhrase", searchPhrase) :
                new ObjectParameter("searchPhrase", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchResult>("GetAlbumSearch", searchPhraseParameter, pageSizeParameter, pageIndexParameter);
        }
    
        public virtual ObjectResult<SearchResult> GetTrackSearch(string searchPhrase, Nullable<int> pageSize, Nullable<int> pageIndex)
        {
            var searchPhraseParameter = searchPhrase != null ?
                new ObjectParameter("searchPhrase", searchPhrase) :
                new ObjectParameter("searchPhrase", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("pageIndex", pageIndex) :
                new ObjectParameter("pageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchResult>("GetTrackSearch", searchPhraseParameter, pageSizeParameter, pageIndexParameter);
        }
    }
}
